module Post {

    enum PostSort { Date, Category, Author };
    /**
     * Controller for loading/showing posts
     * 
     * @export
     * @class PostController
     */
    export class PostController {
      
        /**
         * Variable holding post data loaded from json file
         * 
         * @static
         * @type {JSON}
         */
        static posts: Array<Object>;

        static numbPerPage = 1;

        static sortBy: PostSort = null;
        

        /**
         * Initializes the post page and load posts
         */
        static initPage(page: number, sortBy: PostSort = PostSort.Date) {

            if (this.posts == null) {
                console.log("POST IS NULL");
                this.loadJson(function(response) {
                    PostController.posts = JSON.parse(response);//parse actual json retrieved
                    PostController.renderPosts(page);

                });
            }
            else {
                console.log("POST IS NOT NULL");
                this.renderPosts(page);
            }


        }

        static sortPosts(sortBy: PostSort = PostSort.Date) {
            if (this.sortBy != sortBy) {
                switch (sortBy) {
                    case PostSort.Date:
                        this.sortByDate();
                        this.sortBy = PostSort.Date;
                        break;

                    case PostSort.Category:
                        this.sortByCategory();
                        this.sortBy = PostSort.Category;
                        break;

                    case PostSort.Author:
                        this.sortByAuthor();
                        this.sortBy = PostSort.Author;
                        break;
                }
            }
        }
        
        
        /**
         * Renders posts loaded
         * 
         * @static
         */
        static renderPosts(page: number) {
            this.sortByDate();
            var html = "";
            for (var i = page; i < this.posts.length && i < this.numbPerPage; ++i) {
                html += Spa.App.namespace['postListMd'](this.posts[i]);
            }

            document.getElementById("posts").innerHTML = html;
            //Pagination.setPage()
        }


        static sortByDate() {
            this.posts.sort(function(a: Object, b: Object) {
                var momentA = moment(a["created"], "DD.MM.YYYY");
                var momentB = moment(b["created"], "DD.MM.YYYY");
                return momentB.diff(momentA);
            });
        }

        static sortByCategory() {
            this.posts.sort(function(a: Object, b: Object) {
                return a["category"].localeCompare(b.["category"]);
            });
        }

        static sortByAuthor() {
            this.posts.sort(function(a: Object, b: Object) {
                return a["author"].localeCompare(b.["author"]);
            });
        }


        /**
         * Load the posts.json data generated by m2j
         * @src http://codepen.io/KryptoniteDove/post/load-json-file-locally-using-pure-javascript
         * 
         * @static
         * @param callback which retrieve the returned data
         */
        static loadJson(callback) {
            var xobj = new XMLHttpRequest();
            xobj.overrideMimeType("application/json");
            xobj.open('GET', 'posts.json', true);
            /**
             * Function to run when data is returned successfully
             */
            xobj.onreadystatechange = function() {
                if (xobj.readyState == 4 && xobj.status == 200) {

                    callback(xobj.responseText);
                }
            };
            xobj.send(null);
        }
    }
}